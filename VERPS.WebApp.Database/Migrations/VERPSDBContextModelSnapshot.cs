// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VERPS.WebApp.Database;

namespace VERPS.WebApp.Database.Migrations
{
    [DbContext(typeof(VERPSDBContext))]
    partial class VERPSDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BuyerId");

                    b.Property<int>("ConfigType");

                    b.Property<DateTime>("Created");

                    b.Property<int>("DivsionId");

                    b.Property<string>("ItemCodePreset");

                    b.Property<Guid>("ItemGroupId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("PaymentConditionId");

                    b.Property<string>("SupplierId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ExactConfigurations");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<Guid>("ExactID");

                    b.Property<Guid>("ExactUserId");

                    b.Property<bool>("IsComplete");

                    b.Property<bool>("MessageSeen");

                    b.Property<string>("Name");

                    b.Property<Guid>("SupplierId");

                    b.HasKey("Id");

                    b.ToTable("ExactItems");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Currency");

                    b.Property<string>("DBUserId");

                    b.Property<string>("Description");

                    b.Property<Guid?>("Document");

                    b.Property<Guid>("ExactId");

                    b.Property<bool>("IsStoredInExact");

                    b.Property<bool>("ItemsAreInExact");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderNumber");

                    b.Property<string>("PaymentCondition");

                    b.Property<Guid>("Project");

                    b.Property<int?>("SupplierId");

                    b.Property<DateTime>("TimeSend");

                    b.Property<Guid>("User");

                    b.Property<string>("YourRef");

                    b.HasKey("Id");

                    b.HasIndex("DBUserId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ExactOrders");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AmountDC");

                    b.Property<string>("Description");

                    b.Property<int?>("ExactOrderId");

                    b.Property<int?>("ItemId");

                    b.Property<double?>("NetPrice");

                    b.Property<Guid?>("Project");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("ReceiptDate");

                    b.Property<string>("Unit");

                    b.Property<double?>("VATAmount");

                    b.Property<string>("VATCode");

                    b.Property<double?>("VATPercentage");

                    b.HasKey("Id");

                    b.HasIndex("ExactOrderId");

                    b.HasIndex("ItemId");

                    b.ToTable("ExactOrderLines");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Currency");

                    b.Property<string>("Email");

                    b.Property<Guid>("ExactId");

                    b.Property<Guid>("ExactUser");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("VATNumber");

                    b.Property<string>("Website");

                    b.Property<string>("Zipcode");

                    b.HasKey("Id");

                    b.ToTable("ExactSuppliers");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactSupplierConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsSet");

                    b.Property<int?>("SupplierId");

                    b.Property<string>("SupplierName");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("ExactSupplierConfigurations");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("RefreshTime");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("ExactTokens");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("ExactTokenId");

                    b.Property<bool>("HasConfig");

                    b.Property<bool>("IsExact");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Provider");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Token");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ExactTokenId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VERPS.WebApp.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactConfiguration", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.User")
                        .WithOne("ExactConfiguration")
                        .HasForeignKey("VERPS.WebApp.Database.Models.ExactConfiguration", "UserId");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactOrder", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.User", "DBUser")
                        .WithMany()
                        .HasForeignKey("DBUserId");

                    b.HasOne("VERPS.WebApp.Database.Models.ExactSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactOrderLine", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.ExactOrder")
                        .WithMany("Lines")
                        .HasForeignKey("ExactOrderId");

                    b.HasOne("VERPS.WebApp.Database.Models.ExactItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.ExactSupplierConfig", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.ExactSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("VERPS.WebApp.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VERPS.WebApp.Database.Models.User", b =>
                {
                    b.HasOne("VERPS.WebApp.Database.Models.ExactToken", "ExactToken")
                        .WithMany()
                        .HasForeignKey("ExactTokenId");
                });
#pragma warning restore 612, 618
        }
    }
}
